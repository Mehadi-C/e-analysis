{"ast":null,"code":"var _jsxFileName = \"/home/homeperson/Documents/programming/projects/eanalysis/_FINAL/e-analysis/frontend/react/src/components/upload/Upload.js\";\nimport React, { useState } from 'react';\nimport './Upload.css'; // import './Upload.scss';\n// import Image from './logo.svg';\n// import axios from '../../axios';\n// import {CopyToClipboard } from 'react-copy-to-clipboard';\n// import {MdDone} from 'react-icons/md';\n\nimport Dropzone from 'react-dropzone';\n\nconst Upload = () => {\n  // const [image,setImage]=useState(null);\n  const [progress, setProgress] = useState(null); // const [currentlyUpload,setCurrentlyUpload]=useState(false);\n  // const [error,setError]=useState({\n  //     found:false,\n  //     message: ''\n  // });\n  // const [copied,setCopied]=useState(false);\n\n  const maxSize = 5000000; // const onCopyText=()=>{\n  //     setCopied(true)\n  //     setTimeout(() => {\n  //         setCopied(false)\n  //     }, 1000);\n  // }\n\n  const onDrop = acceptedFiles => {\n    console.log(acceptedFiles);\n  };\n\n  const handleOnSubmit = ({\n    target: {\n      files\n    }\n  }) => {\n    console.log('Heloo !');\n    let formData = new FormData();\n    formData.append('image', files[0]);\n    const options = {\n      onUploadProgress: progressEvent => {\n        const {\n          loaded,\n          total\n        } = progressEvent;\n        let percent = Math.floor(loaded * 100 / total);\n        console.log(`${loaded}kb of ${total} kb | ${percent} % `);\n\n        if (percent > 0 && percent < 100) {\n          setProgress(percent);\n          setCurrentlyUpload(true);\n        }\n      }\n    }; // axios.post('/images/',formData,options).then(res=>\n    // { \n    //         setTimeout(()=>{\n    //             console.log(res.data.data);\n    //             setImage(res.data);\n    //             setProgress(0);\n    //             setCurrentlyUpload(false);\n    //         },2000)\n    // }\n    // ).catch((err)=>{\n    //     console.log(err);\n    //     if(err.response.status === 400){\n    //         const errMsg=err.response.data;\n    //         console.log(err.response.data.errors)\n    //         setError({\n    //             found:true,\n    //             message:err.response.data.errors\n    //         })\n    //         if(errMsg){ \n    //             console.log(errMsg)\n    //         }\n    //     }else{\n    //         console.log('Another error %s',err)\n    //     }\n    // });\n\n    console.log('Hello 3');\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, \"Upload Image or Video\"), /*#__PURE__*/React.createElement(Dropzone, {\n    onDrop: onDrop,\n    multiple: false,\n    minSize: 0,\n    maxSize: maxSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: \"file-container\"\n  }), {\n    onChange: handleOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 41\n    }\n  }, \"Drop Image or Video Here \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleOnSubmit,\n    name: \"upfile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, \"Upload file\"))));\n};\n\nexport default Upload;","map":{"version":3,"sources":["/home/homeperson/Documents/programming/projects/eanalysis/_FINAL/e-analysis/frontend/react/src/components/upload/Upload.js"],"names":["React","useState","Dropzone","Upload","progress","setProgress","maxSize","onDrop","acceptedFiles","console","log","handleOnSubmit","target","files","formData","FormData","append","options","onUploadProgress","progressEvent","loaded","total","percent","Math","floor","setCurrentlyUpload","getRootProps","getInputProps","className"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport './Upload.css';\n// import './Upload.scss';\n// import Image from './logo.svg';\n// import axios from '../../axios';\n// import {CopyToClipboard } from 'react-copy-to-clipboard';\n// import {MdDone} from 'react-icons/md';\nimport Dropzone from 'react-dropzone';\n\n\nconst Upload=()=>{\n    // const [image,setImage]=useState(null);\n    const [progress,setProgress]=useState(null);\n    // const [currentlyUpload,setCurrentlyUpload]=useState(false);\n    // const [error,setError]=useState({\n    //     found:false,\n    //     message: ''\n    // });\n    // const [copied,setCopied]=useState(false);\n    const maxSize=5000000 ;\n\n    // const onCopyText=()=>{\n    //     setCopied(true)\n    //     setTimeout(() => {\n    //         setCopied(false)\n    //     }, 1000);\n    // }\n    const onDrop=(acceptedFiles)=>{\n        console.log(acceptedFiles)\n    }\n   \n    const handleOnSubmit=  ({target:{files}})=>{\n                console.log('Heloo !');\n                let formData=new FormData();\n                formData.append('image',files[0]);\n                const options={\n                    onUploadProgress: (progressEvent)=>{\n                       const {loaded,total} = progressEvent;\n                       let percent =Math.floor((loaded*100)/total);\n                       console.log(`${loaded}kb of ${total} kb | ${percent} % `);\n                       if(percent>0 && percent<100){\n                            setProgress(percent);\n                            setCurrentlyUpload(true);\n                       }\n\n                      }\n\n                }\n                \n                \n\n                // axios.post('/images/',formData,options).then(res=>\n                // { \n                //         setTimeout(()=>{\n                //             console.log(res.data.data);\n                //             setImage(res.data);\n                //             setProgress(0);\n                //             setCurrentlyUpload(false);\n                //         },2000)\n                // }\n                // ).catch((err)=>{\n                //     console.log(err);\n                //     if(err.response.status === 400){\n                //         const errMsg=err.response.data;\n                //         console.log(err.response.data.errors)\n                //         setError({\n                //             found:true,\n                //             message:err.response.data.errors\n                //         })\n                //         if(errMsg){ \n                //             console.log(errMsg)\n                //         }\n                //     }else{\n                //         console.log('Another error %s',err)\n                //     }\n                // });\n\n\n              console.log('Hello 3');\n    }\n    return(\n        <>\n        {\n            (\n                <div className=\"container\">\n                {\n                    (\n                    <>\n                        <h3>Upload Image or Video</h3>\n                        {/* <p>File should be Jpeg,Png,..</p> */}\n                        <Dropzone onDrop={onDrop} multiple={false} minSize={0} maxSize={maxSize}>\n                            {\n                                ({ getRootProps,getInputProps })=>(\n                                    <div {...getRootProps({ className: \"file-container\" })} onChange={handleOnSubmit}>\n                                        <input {...getInputProps()} />\n                                        {/* <img src={Image} alt=\"example\"/> */}\n                                        <p>Drop Image or Video Here </p>\n                                        <input type=\"file\"  onChange={handleOnSubmit} name=\"upfile\"/>\n                                    </div>\n                                )\n                            }\n                           \n                        </Dropzone>\n                        <button type=\"submit\"  className=\"btn-upload\">Upload file</button>\n    \n                     </>  \n                    )\n                }\n    \n             </div>\n            )\n        }       \n         </>\n    )\n};\n\nexport default Upload;"]},"metadata":{},"sourceType":"module"}