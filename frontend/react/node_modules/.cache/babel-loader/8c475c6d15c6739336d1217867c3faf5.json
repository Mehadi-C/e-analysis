{"ast":null,"code":"var _jsxFileName = \"/home/homeperson/Documents/programming/projects/eanalysis/_FINAL/e-analysis/frontend/react/src/components/upload/Upload.js\";\nimport React, { useState } from 'react';\nimport './Upload.css'; // import './Upload.scss';\n// import Image from './logo.svg';\n// import axios from '../../axios';\n// import {CopyToClipboard } from 'react-copy-to-clipboard';\n// import {MdDone} from 'react-icons/md';\n\nimport Dropzone from 'react-dropzone';\n\nconst Upload = () => {\n  // const [image,setImage]=useState(null);\n  // const [progress,setProgress]=useState(null);\n  // const [currentlyUpload,setCurrentlyUpload]=useState(false);\n  // const [error,setError]=useState({\n  //     found:false,\n  //     message: ''\n  // });\n  // const [copied,setCopied]=useState(false);\n  const maxSize = 5000000; // const onCopyText=()=>{\n  //     setCopied(true)\n  //     setTimeout(() => {\n  //         setCopied(false)\n  //     }, 1000);\n  // }\n\n  const onDrop = acceptedFiles => {\n    console.log(acceptedFiles);\n  };\n\n  const handleOnSubmit = ({\n    target: {\n      files\n    }\n  }) => {\n    console.log('Heloo !');\n    let formData = new FormData();\n    formData.append('image', files[0]); // const options={\n    //     onUploadProgress: (progressEvent)=>{\n    //        const {loaded,total} = progressEvent;\n    //        let percent =Math.floor((loaded*100)/total);\n    //        console.log(`${loaded}kb of ${total} kb | ${percent} % `);\n    //        if(percent>0 && percent<100){\n    //             setProgress(percent);\n    //             setCurrentlyUpload(true);\n    //        }\n    //       }\n    // }\n    // axios.post('/images/',formData,options).then(res=>\n    // { \n    //         setTimeout(()=>{\n    //             console.log(res.data.data);\n    //             setImage(res.data);\n    //             setProgress(0);\n    //             setCurrentlyUpload(false);\n    //         },2000)\n    // }\n    // ).catch((err)=>{\n    //     console.log(err);\n    //     if(err.response.status === 400){\n    //         const errMsg=err.response.data;\n    //         console.log(err.response.data.errors)\n    //         setError({\n    //             found:true,\n    //             message:err.response.data.errors\n    //         })\n    //         if(errMsg){ \n    //             console.log(errMsg)\n    //         }\n    //     }else{\n    //         console.log('Another error %s',err)\n    //     }\n    // });\n\n    console.log('Hello 3');\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null,\n  /*#__PURE__*/\n  // currentlyUpload ?(\n  //     <div className=\"progress-container\">\n  //         <p>Uploading...</p>\n  //         {/* <progress value={progress} max=\"100\" min=\"0\" className=\"progress-bar\"/> */}\n  //      </div>  \n  // ):\n  React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  },\n  /*#__PURE__*/\n  // image ? \n  // (    \n  //  <>\n  //   {\n  //     error.found && (\n  //         <div className=\"error-container\">\n  //             {error.message}\n  //         </div>\n  //     )\n  //  }\n  //  { \n  //     <>\n  //         <div className=\"icon-container\">\n  //         <div className=\"success-icon\">\n  //              {/* <MdDone/> */}\n  //         </div>\n  //     </div>\n  //         <h3 className=\"success-text\">Uploaded Successfully!</h3>\n  //         {/* <div className=\"image-container\">\n  //             <img className=\"full-image\" src={`https://imageuploader90.herokuapp.com/images/${image._id}`} alt=\"name\" />\n  //         </div> */}\n  //         {/* <div className=\"link-container\">\n  //             <input type=\"text\"  className=\"text-container\" value={`https://imageuploader90.herokuapp.com/images/${image._id}`} disabled/>\n  //             <CopyToClipboard text={`https://imageuploader90.herokuapp.com/images/${image._id}`} onCopy={onCopyText}>\n  //             <button type=\"button\" className=\"copy-btn\">{copied ? 'Copied !' : 'Copy' }</button>\n  //             </CopyToClipboard>\n  //         </div> */}\n  //         </>     \n  //  }    \n  //  </>\n  // ):\n  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }, \"Upload Image or Video\"), /*#__PURE__*/React.createElement(Dropzone, {\n    onDrop: onDrop,\n    multiple: false,\n    minSize: 0,\n    maxSize: maxSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: \"file-container\"\n  }), {\n    onChange: handleOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 41\n    }\n  }, \"Drop Image or Video Here \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleOnSubmit,\n    name: \"upfile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 41\n    }\n  }, \"Upload file\"))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"trans\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, \"Or\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"btn-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleOnSubmit,\n    name: \"upfile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 30\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 30\n    }\n  }, \"Upload file\")))));\n};\n\nexport default Upload;","map":{"version":3,"sources":["/home/homeperson/Documents/programming/projects/eanalysis/_FINAL/e-analysis/frontend/react/src/components/upload/Upload.js"],"names":["React","useState","Dropzone","Upload","maxSize","onDrop","acceptedFiles","console","log","handleOnSubmit","target","files","formData","FormData","append","getRootProps","getInputProps","className"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport './Upload.css';\n// import './Upload.scss';\n// import Image from './logo.svg';\n// import axios from '../../axios';\n// import {CopyToClipboard } from 'react-copy-to-clipboard';\n// import {MdDone} from 'react-icons/md';\nimport Dropzone from 'react-dropzone';\n\n\nconst Upload=()=>{\n    // const [image,setImage]=useState(null);\n    // const [progress,setProgress]=useState(null);\n    // const [currentlyUpload,setCurrentlyUpload]=useState(false);\n    // const [error,setError]=useState({\n    //     found:false,\n    //     message: ''\n    // });\n    // const [copied,setCopied]=useState(false);\n    const maxSize=5000000 ;\n\n    // const onCopyText=()=>{\n    //     setCopied(true)\n    //     setTimeout(() => {\n    //         setCopied(false)\n    //     }, 1000);\n    // }\n    const onDrop=(acceptedFiles)=>{\n        console.log(acceptedFiles)\n    }\n   \n    const handleOnSubmit=  ({target:{files}})=>{\n                console.log('Heloo !');\n                let formData=new FormData();\n                formData.append('image',files[0]);\n                // const options={\n                //     onUploadProgress: (progressEvent)=>{\n                //        const {loaded,total} = progressEvent;\n                //        let percent =Math.floor((loaded*100)/total);\n                //        console.log(`${loaded}kb of ${total} kb | ${percent} % `);\n                //        if(percent>0 && percent<100){\n                //             setProgress(percent);\n                //             setCurrentlyUpload(true);\n                //        }\n\n                //       }\n\n                // }\n                \n                \n\n                // axios.post('/images/',formData,options).then(res=>\n                // { \n                //         setTimeout(()=>{\n                //             console.log(res.data.data);\n                //             setImage(res.data);\n                //             setProgress(0);\n                //             setCurrentlyUpload(false);\n                //         },2000)\n                // }\n                // ).catch((err)=>{\n                //     console.log(err);\n                //     if(err.response.status === 400){\n                //         const errMsg=err.response.data;\n                //         console.log(err.response.data.errors)\n                //         setError({\n                //             found:true,\n                //             message:err.response.data.errors\n                //         })\n                //         if(errMsg){ \n                //             console.log(errMsg)\n                //         }\n                //     }else{\n                //         console.log('Another error %s',err)\n                //     }\n                // });\n\n\n              console.log('Hello 3');\n    }\n    return(\n        <>\n        {\n            // currentlyUpload ?(\n            //     <div className=\"progress-container\">\n            //         <p>Uploading...</p>\n            //         {/* <progress value={progress} max=\"100\" min=\"0\" className=\"progress-bar\"/> */}\n            //      </div>  \n            // ):\n            (\n                <div className=\"container\">\n                {\n                    // image ? \n                    // (    \n                    //  <>\n                     \n                    //   {\n                    //     error.found && (\n                    //         <div className=\"error-container\">\n                    //             {error.message}\n                    //         </div>\n                    //     )\n                    //  }\n                    //  { \n                    //     <>\n                    //         <div className=\"icon-container\">\n                    //         <div className=\"success-icon\">\n                    //              {/* <MdDone/> */}\n                    //         </div>\n                    //     </div>\n                    //         <h3 className=\"success-text\">Uploaded Successfully!</h3>\n                    //         {/* <div className=\"image-container\">\n                    //             <img className=\"full-image\" src={`https://imageuploader90.herokuapp.com/images/${image._id}`} alt=\"name\" />\n                    //         </div> */}\n        \n                    //         {/* <div className=\"link-container\">\n                    //             <input type=\"text\"  className=\"text-container\" value={`https://imageuploader90.herokuapp.com/images/${image._id}`} disabled/>\n                    //             <CopyToClipboard text={`https://imageuploader90.herokuapp.com/images/${image._id}`} onCopy={onCopyText}>\n                    //             <button type=\"button\" className=\"copy-btn\">{copied ? 'Copied !' : 'Copy' }</button>\n                    //             </CopyToClipboard>\n                    //         </div> */}\n    \n                    //         </>     \n                    //  }    \n                    //  </>\n    \n                    // ):\n                    (\n                    <>\n                        <h3>Upload Image or Video</h3>\n                        {/* <p>File should be Jpeg,Png,..</p> */}\n                        <Dropzone onDrop={onDrop} multiple={false} minSize={0} maxSize={maxSize}>\n                            {\n                                ({ getRootProps,getInputProps })=>(\n                                    <div {...getRootProps({ className: \"file-container\" })} onChange={handleOnSubmit}>\n                                        <input {...getInputProps()} />\n                                        {/* <img src={Image} alt=\"example\"/> */}\n                                        <p>Drop Image or Video Here </p>\n                                        <input type=\"file\"  onChange={handleOnSubmit} name=\"upfile\"/>\n                                        <button type=\"submit\"  className=\"btn-upload\">Upload file</button>\n                                    </div>\n                                )\n                            }\n                           \n                        </Dropzone>\n                        <p className=\"trans\">Or</p>\n                \n                        <div class=\"btn-container\">\n                             <input type=\"file\"  onChange={handleOnSubmit} name=\"upfile\"/>\n                             <button type=\"submit\"  className=\"btn-upload\">Upload file</button>\n                        </div>\n    \n                     </>  \n                    )\n                }\n    \n             </div>\n            )\n        }\n       \n         {/* <div className={currentlyUpload ? \"hid-footer\" : \"footer-text\"}>Created By <span className=\"author-name\">Thomas98</span>-devChallenges.io</div> */}\n         </>\n    )\n};\n\nexport default Upload;"]},"metadata":{},"sourceType":"module"}